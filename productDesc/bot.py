import asyncio
import logging
import os
import uuid

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from main import process_product
from dotenv import load_dotenv
from db import log_request

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# /start
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "`–ú–æ–¥–µ–ª—å; –ù–∞–∑–≤–∞–Ω–∏–µ`\n\n"
        "–ü—Ä–∏–º–µ—Ä: `iPhone 14; –°–º–∞—Ä—Ç—Ñ–æ–Ω` üì±",
        parse_mode="Markdown"
    )

# /help
@dp.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer(
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
        "/help ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        "üëâ –ß—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–≤–∞—Ä: \n"
        "1. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ üì∑\n"
        "2. –í –ø–æ–¥–ø–∏—Å–∏ —É–∫–∞–∂–∏ `–ú–æ–¥–µ–ª—å; –ù–∞–∑–≤–∞–Ω–∏–µ`.\n\n"
        "–Ø –≤–µ—Ä–Ω—É —Ç–µ–±–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚úÖ"
    )

# –§–æ—Ç–æ
@dp.message(lambda msg: msg.photo)
@dp.message(lambda msg: msg.photo)
async def handle_photo(message: Message):
    if not message.caption:
        await message.answer("–î–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ú–æ–¥–µ–ª—å; –ù–∞–∑–≤–∞–Ω–∏–µ")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_path = file.file_path
    downloaded_file = await bot.download_file(file_path)

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É images, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("images", exist_ok=True)

    # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    img_name = f"images/{uuid.uuid4().hex}.jpg"

    with open(img_name, "wb") as f:
        f.write(downloaded_file.read())

    # –†–∞–∑–±–∏—Ä–∞–µ–º caption
    parts = message.caption.split(";")
    if len(parts) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∏: –ú–æ–¥–µ–ª—å; –ù–∞–∑–≤–∞–Ω–∏–µ")
        return

    model, name = parts[0].strip(), parts[1].strip()

    desc, cat = process_product(img_name, model, name)

    await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\nüì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}")

    # –õ–æ–≥–∏—Ä—É–µ–º
    await log_request(
        user_id=message.from_user.id,
        model=model,
        name=name,
        description=desc,
        category=cat,
        image_path=img_name
    )
# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
