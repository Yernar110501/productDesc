import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from main import process_product
from dotenv import load_dotenv
from db import log_request

load_dotenv()
# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# /start
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ + –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –º–æ–¥–µ–ª—å (—á–µ—Ä–µ–∑ ;).")

# –§–æ—Ç–æ
@dp.message(lambda msg: msg.photo)
async def handle_photo(message: Message):
    if not message.caption:
        await message.answer("–î–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ú–æ–¥–µ–ª—å; –ù–∞–∑–≤–∞–Ω–∏–µ")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_path = file.file_path
    downloaded_file = await bot.download_file(file_path)

    img_name = "temp.jpg"
    with open(img_name, "wb") as f:
        f.write(downloaded_file.read())

    # –†–∞–∑–±–∏—Ä–∞–µ–º caption
    parts = message.caption.split(";")
    if len(parts) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∏: –ú–æ–¥–µ–ª—å; –ù–∞–∑–≤–∞–Ω–∏–µ")
        return

    model, name = parts[0].strip(), parts[1].strip()

    desc, cat = process_product(img_name, model, name)

    await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\nüì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}")

    await log_request(
        user_id=message.from_user.id,
        model=model,
        name=name,
        description=desc,
        category=cat,
        image_path=img_name
    )

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
